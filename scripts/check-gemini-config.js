#!/usr/bin/env node

/**
 * Script de diagnostic pour v√©rifier la configuration Gemini
 */

console.log('üîç Diagnostic de la configuration Gemini...\n');

// V√©rifier les variables d'environnement
const geminiKey = process.env.EXPO_PUBLIC_GEMINI_API_KEY;
const mapboxKey = process.env.EXPO_PUBLIC_MAPBOX_ACCESS_TOKEN;

console.log('üìã Variables d\'environnement :');
console.log(`   EXPO_PUBLIC_GEMINI_API_KEY: ${geminiKey ? '‚úÖ Configur√©e' : '‚ùå Non configur√©e'}`);
console.log(`   EXPO_PUBLIC_MAPBOX_ACCESS_TOKEN: ${mapboxKey ? '‚úÖ Configur√©e' : '‚ùå Non configur√©e'}`);

if (!geminiKey) {
  console.log('\n‚ùå PROBL√àME : Cl√© API Gemini non trouv√©e');
  console.log('\nüîß SOLUTION :');
  console.log('1. Cr√©ez un fichier .env √† la racine du projet');
  console.log('2. Ajoutez votre cl√© API :');
  console.log('   EXPO_PUBLIC_GEMINI_API_KEY=your_gemini_api_key_here');
  console.log('3. Red√©marrez l\'application');
  console.log('\nüìñ Guide complet : GEMINI_SETUP.md');
} else {
  console.log('\n‚úÖ Cl√© API Gemini trouv√©e');
  console.log(`   Longueur : ${geminiKey.length} caract√®res`);
  console.log(`   Commence par : ${geminiKey.substring(0, 10)}...`);
  
  // V√©rifier le format de la cl√©
  if (geminiKey.startsWith('AIza')) {
    console.log('‚úÖ Format de cl√© valide (commence par AIza)');
  } else {
    console.log('‚ö†Ô∏è  Format de cl√© suspect (devrait commencer par AIza)');
  }
}

console.log('\nüîó Liens utiles :');
console.log('   - Google AI Studio : https://makersuite.google.com/app/apikey');
console.log('   - Documentation Gemini : https://ai.google.dev/docs');
console.log('   - Guide Wildwatch : GEMINI_SETUP.md');
